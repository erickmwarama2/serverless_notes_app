service: notes-backend

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs16.x
  region: eu-west-1
  stage: prod
  memorySize: 128
  timeout: 5
  endpointType: REGIONAL
  environment:
    NOTES_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    COGNITO_IDENTITY_POOL_ID: eu-west-1:5c02a097-7227-44f2-9168-2b5761cbf2ef
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:PutItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:PutItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}/*"

resources:
  Resources:
    NotesTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.NOTES_TABLE}
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
          - AttributeName: note_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: note_id-index
            KeySchema:
              - AttributeName: note_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: '*'
          gatewayresponse.header.Access-Control-Allow-Headers: '*'
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

custom:
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Length
    - Authorization
    - X-Amz-Date
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - app_user_id
    - app_user_name
  customDomain:
    domainName: api.soulandmindconsultant.com
    basePath: v1
    stage: ${self:provider.stage}
    certificateName: soulandmindconsultant.com
    createRoute53Record: true

functions:
  hello:
    handler: handler.hello
  authenticate-google:
    handler: authenticate-google.handler
    description: Google IDP Authentication
    events:
      - http:
          path: auth
          method: get
          cors:
            origin : '*'
            headers: ${self:custom.allowedHeaders}
  add-note:
    handler: api/add-note.handler
    description: POST /note
    events:
      - http:
          path: note
          method: post
          authorizer:
            type: aws_iam
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  update-note:
    handler: api/update-note.handler
    description: PATCH /note
    events:
      - http:
          path: note
          method: patch
          authorizer:
            type: aws_iam
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  get-notes:
    handler: api/get-notes.handler
    description: GET /note
    events:
      - http:
          path: notes
          method: get
          authorizer:
            type: aws_iam
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  get-note:
    handler: api/get-note.handler
    description: GET /note
    events:
      - http:
          path: note/n/{note_id}
          method: get
          authorizer:
            type: aws_iam
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  delete-note:
    handler: api/delete-note.handler
    description: DELETE /note
    events:
      - http:
          path: note/t/{timestamp}
          method: delete
          authorizer:
            type: aws_iam
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

plugins:
  - serverless-offline
  - serverless-domain-manager

